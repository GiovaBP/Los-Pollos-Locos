ENEMY

import javax.swing.*;
import java.util.HashMap;
import java.util.Random;

public class Enemy {
    private String name;
    private HashMap<Stats, Integer> stats;

    public Enemy(String name) {
        this.name = name;
        this.stats = new HashMap<>();

        // Inicialización de estadísticas con valores modificados
        this.stats.put(Stats.HEALTH, 120);
        this.stats.put(Stats.MAX_HEALTH, 120);
        this.stats.put(Stats.MANA, 50);
        this.stats.put(Stats.MAX_MANA, 50);
        this.stats.put(Stats.STRENGTH, 20);
        this.stats.put(Stats.RESISTANCE, 8);
        this.stats.put(Stats.AGILITY, 15);
        this.stats.put(Stats.PRECISION, 12);
        this.stats.put(Stats.CHANCE, 5);
        this.stats.put(Stats.HIT_RATE, 85);
        this.stats.put(Stats.DODGE_RATE, 12);
        this.stats.put(Stats.CRIT_RATE, 7);
        this.stats.put(Stats.CRIT_DAMAGE, 175); // 175% de daño en críticos
    }

    public String getName() {
        return this.name;
    }

    public int getStat(Stats stat) {
        return this.stats.get(stat);
    }

    public void receiveDamage(int damage) {
        int evasion = this.stats.get(Stats.DODGE_RATE);
        Random rand = new Random();

        // Probabilidad de evasión
        if (rand.nextInt(100) < evasion) {
            JOptionPane.showMessageDialog(null, this.name + " esquivó el ataque!");
            return;
        }

        // Calcular daño reducido por defensa
        int defense = this.stats.get(Stats.RESISTANCE);
        int finalDamage = Math.max(damage - defense, 0); // El daño no puede ser negativo

        int currentHP = this.stats.get(Stats.HIT_RATE);
        currentHP -= finalDamage;
        this.stats.put(Stats.HEALTH, currentHP);

        JOptionPane.showMessageDialog(null, this.name + " recibió " + finalDamage + " de daño. HP restante: " + currentHP);
    }

    public boolean isAlive() {
        return this.stats.get(Stats.HEALTH) > 0;
    }

    public void attack(Player player) {
        int accuracy = this.stats.get(Stats.HIT_RATE);
        Random rand = new Random();

        // Comprobar si el ataque acierta
        if (rand.nextInt(100) > accuracy) {
            JOptionPane.showMessageDialog(null, this.name + " falló el ataque.");
            return;
        }

        int damage = this.stats.get(Stats.STRENGTH);

        // Comprobación de golpe crítico
        int criticalChance = this.stats.get(Stats.CRIT_RATE);
        if (rand.nextInt(100) < criticalChance) {
            damage = (damage * this.stats.get(Stats.CRIT_DAMAGE)) / 100;
            JOptionPane.showMessageDialog(null, this.name + " realizó un golpe crítico!");
        }

        JOptionPane.showMessageDialog(null, this.name + " ataca a " + player.getName() + " causando " + damage + " de daño.");
        player.receiveDamage(damage);
    }
}
